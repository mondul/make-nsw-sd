package main

import (
	"bytes"
	"compress/flate"
	"os"
	"path/filepath"
)

var compressed_exo = []byte{
	0x64, 0x8B, 0xC1, 0x6A, 0xC6, 0x20, 0x10, 0x84,
	0xEF, 0x3E, 0x8D, 0x16, 0x7A, 0xF4, 0x49, 0x4A,
	0x59, 0x56, 0x9D, 0x26, 0x52, 0x75, 0x65, 0xD5,
	0x26, 0x7D, 0xFB, 0x12, 0x52, 0xC8, 0xE1, 0xBF,
	0x7D, 0xF3, 0xCD, 0xCC, 0x07, 0x4E, 0x19, 0x7D,
	0x87, 0xE2, 0xD3, 0x24, 0x84, 0xB5, 0x55, 0x49,
	0xF0, 0xEE, 0x61, 0x5A, 0x03, 0xEA, 0xAD, 0x49,
	0x79, 0x70, 0x28, 0x77, 0x24, 0x9C, 0x11, 0x7D,
	0x66, 0x69, 0xB4, 0x73, 0x4B, 0x05, 0x3A, 0xBC,
	0x35, 0x68, 0xCF, 0xA0, 0xD7, 0x45, 0x1C, 0x23,
	0xC6, 0x55, 0x84, 0xC2, 0xED, 0x9B, 0xBA, 0x4A,
	0xCA, 0xED, 0x4B, 0x68, 0xFC, 0x8E, 0x5A, 0xE3,
	0xAB, 0x47, 0x5D, 0x97, 0x77, 0x86, 0x4B, 0x91,
	0x83, 0x0E, 0xCD, 0x33, 0xB7, 0x8D, 0xA6, 0x50,
	0xE4, 0xF2, 0xBC, 0x8A, 0x6C, 0xD4, 0x45, 0xE7,
	0x3F, 0x06, 0x5E, 0x89, 0x94, 0x27, 0xBC, 0x73,
	0xEF, 0x6F, 0xF6, 0x96, 0xB9, 0xFD, 0x40, 0x27,
	0x92, 0xB7, 0x7F, 0x01, 0x00, 0x00, 0xFF, 0xFF,
}

var compressed_hosts = []byte{
	0x6C, 0xCA, 0x41, 0x0A, 0xC2, 0x30, 0x10, 0x46,
	0xE1, 0x7D, 0x4F, 0x31, 0xE0, 0x2E, 0xE0, 0x4F,
	0x12, 0xAC, 0xD2, 0xAD, 0x07, 0x70, 0xE3, 0x11,
	0xA6, 0x23, 0x06, 0x75, 0x46, 0x92, 0xD1, 0x5E,
	0x5F, 0x14, 0x75, 0xD3, 0x6E, 0xDF, 0xFB, 0x56,
	0xB4, 0xBF, 0x1A, 0x5F, 0xE8, 0x50, 0xD4, 0x45,
	0x47, 0xA3, 0xA3, 0xD4, 0xA7, 0xD4, 0xD6, 0xA5,
	0xBC, 0x43, 0x44, 0x44, 0xA2, 0xA0, 0xDF, 0x87,
	0xB0, 0x54, 0xD7, 0xF2, 0xA8, 0x76, 0x17, 0xB0,
	0xDD, 0x96, 0x76, 0x9B, 0x8A, 0xF3, 0x19, 0xA1,
	0x1B, 0x7A, 0xE4, 0xB4, 0x45, 0xDA, 0x0C, 0xC8,
	0xB1, 0xA7, 0xC0, 0xA6, 0xEA, 0xD2, 0x1C, 0x3F,
	0x39, 0x95, 0x53, 0x81, 0x8A, 0xCF, 0xE5, 0x87,
	0xF1, 0xA8, 0x7F, 0xFA, 0x66, 0xAF, 0x00, 0x00,
	0x00, 0xFF, 0xFF,
}

func preventBan(outdir string) error {
	// Create the exosph√®re ini file
	exo, err := os.Create(filepath.Join(outdir, "exosphere.ini"))
	if err != nil {
		return err
	}
	defer exo.Close()

	exo_r := flate.NewReader(bytes.NewReader(compressed_exo))
	defer exo_r.Close()
	_, err = exo.ReadFrom(exo_r)
	if err != nil {
		return err
	}

	// Create the hosts file
	hosts_path := filepath.Join(outdir, "atmosphere/hosts/")
	os.MkdirAll(hosts_path, os.ModePerm)
	hosts, err := os.Create(filepath.Join(hosts_path, "default.txt"))
	if err != nil {
		return err
	}
	defer hosts.Close()

	hosts_r := flate.NewReader(bytes.NewReader(compressed_hosts))
	defer hosts_r.Close()
	_, err = hosts.ReadFrom(hosts_r)
	if err != nil {
		return err
	}

	return nil
}
